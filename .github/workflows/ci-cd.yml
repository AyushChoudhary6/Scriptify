name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Backend Image
        run: |
          docker build -t ayushchoudhary6/scriptify-backend:latest ./backend
          docker push ayushchoudhary6/scriptify-backend:latest

      - name: Build & Push Frontend Image
        run: |
          docker build -t ayushchoudhary6/scriptify-frontend:latest ./frontend
          docker push ayushchoudhary6/scriptify-frontend:latest

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: scriptify-cluster
          node_image: kindest/node:v1.27.0

      - name: Install nginx ingress controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

      - name: Install metrics server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          # Patch metrics server for Kind cluster
          kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'

      - name: Create API key secrets
        run: |
          # Create dummy secrets for CI/CD demo (replace with real secrets in production)
          kubectl create secret generic backend-secrets \
            --from-literal=assemblyai-api-key=demo-key-for-pipeline \
            --from-literal=gemini-api-key=demo-key-for-pipeline

      - name: Deploy services first
        run: |
          kubectl apply -f k8s/backend-service.yml
          kubectl apply -f k8s/frontend-service.yml

      - name: Deploy applications
        run: |
          kubectl apply -f k8s/backend-deployment.yml
          kubectl apply -f k8s/frontend-deployment.yml

      - name: Wait for deployments
        run: |
          echo "Waiting for backend deployment..."
          kubectl rollout status deployment/backend-deployment --timeout=300s
          echo "Waiting for frontend deployment..."
          kubectl rollout status deployment/frontend-deployment --timeout=300s

      - name: Deploy ingress and HPA
        run: |
          kubectl apply -f k8s/ingress.yml
          kubectl apply -f k8s/hpa.yml

      - name: Verify deployment
        run: |
          echo "=== Deployment Status ==="
          kubectl get pods
          kubectl get services
          kubectl get ingress
          kubectl get hpa

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Debugging failed deployment ==="
          kubectl get pods -o wide
          kubectl get events --sort-by=.metadata.creationTimestamp
          echo "=== Backend pod logs ==="
          kubectl logs -l app=backend --tail=50
          echo "=== Frontend pod logs ==="
          kubectl logs -l app=frontend --tail=50

      - name: Get App URL
        run: |
          echo "App deployed successfully!"
          echo "Access via: kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller 8080:80"
          echo "Then visit: http://localhost:8080"
