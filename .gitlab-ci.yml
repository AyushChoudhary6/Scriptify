stages:
  - build    # Single build stage for both backend and frontend
  - test     # Test stage
  - deploy   # Deploy stage

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Build both backend and frontend in sequence
build-application:
  stage: build
  tags:
    - local
  before_script:
    - docker info
  script:
    - echo "🚀 Starting Complete Application Build..."
    - echo ""
    - echo "🔧 Step 1 - Building Backend Docker Image..."
    - cd backend
    - docker build -t scriptify-backend:latest .
    - docker tag scriptify-backend:latest ayushchoudhary6/scriptify-backend:latest
    - echo "✅ Backend build completed!"
    - echo ""
    - echo "🎨 Step 2 - Building Frontend Docker Image..."
    - cd ../frontend
    - docker build -t scriptify-frontend:latest .
    - docker tag scriptify-frontend:latest ayushchoudhary6/scriptify-frontend:latest
    - echo "✅ Frontend build completed!"
    - echo ""
    - echo "📤 Step 3 - Loading Images into Kind Cluster..."
    - kind load docker-image ayushchoudhary6/scriptify-backend:latest --name my-cluster
    - kind load docker-image ayushchoudhary6/scriptify-frontend:latest --name my-cluster
    - echo "✅ Images loaded into Kubernetes cluster!"
    - echo ""
    - echo "🎉 Complete Application Build Finished Successfully!"
  only:
    - main

# Test stage (runs after build completes)
test-application:
  stage: test
  tags:
    - local
  script:
    - echo "🧪 Running Application Tests..."
    - echo "Verifying Backend image - ayushchoudhary6/scriptify-backend:latest"
    - docker images | grep scriptify-backend
    - echo "Verifying Frontend image - ayushchoudhary6/scriptify-frontend:latest"  
    - docker images | grep scriptify-frontend
    - echo "Verifying images are loaded in kind cluster..."
    - kubectl get pods --all-namespaces | grep -E "(backend|frontend)" || echo "No pods running yet (expected at this stage)"
    - echo "✅ All tests passed!"
  only:
    - main
  needs:
    - build-application

#Deploy stage (automatic deployment to Kubernetes)
deploy-application:
  stage: deploy
  tags:
    - local
  before_script:
    - kubectl cluster-info || (echo "❌ Kubernetes cluster not accessible" && exit 1)
    - kubectl get nodes
  script:
    - echo "🚀 Deploying Application to Kubernetes..."
    - echo "🧹 Cleaning up existing deployments..."
    - kubectl delete -f k8s/ --ignore-not-found=true
    - echo "⏳ Waiting for cleanup to complete..."
    - sleep 10
    - echo "🔧 Applying Backend deployment and service..."
    - kubectl apply -f k8s/backend-deployment.yml
    - kubectl apply -f k8s/backend-service.yml
    - echo "🎨 Applying Frontend deployment and service..."
    - kubectl apply -f k8s/frontend-deployment.yml
    - kubectl apply -f k8s/frontend-service.yml
    - echo "🔐 Applying Secrets configuration..."
    - kubectl apply -f k8s/secrets.yml || echo "⚠️  Secrets not applied (may need manual configuration)"
    - echo "🌐 Applying Ingress configuration..."
    - kubectl apply -f k8s/ingress.yml || echo "⚠️  Ingress not applied (may not be needed for local setup)"
    - echo "📈 Applying HPA (Horizontal Pod Autoscaler)..."
    - kubectl apply -f k8s/hpa.yml || echo "⚠️  HPA not applied (metrics server may be required)"
    - echo "⏳ Waiting for deployments to be ready..."
    - kubectl wait --for=condition=available --timeout=120s deployment/backend-deployment
    - kubectl wait --for=condition=available --timeout=120s deployment/frontend-deployment
    - echo "🔌 Setting up persistent port forwarding..."
    - pkill -f "kubectl port-forward" || echo "No existing port-forward processes to kill"
    - sleep 2
    - echo "Starting background port forwarding processes..."
    - nohup kubectl port-forward service/frontend-service 3000:80 </dev/null >/dev/null 2>&1 & echo $! > /tmp/frontend-pf.pid
    - nohup kubectl port-forward service/backend-service 8000:8000 </dev/null >/dev/null 2>&1 & echo $! > /tmp/backend-pf.pid
    - sleep 5
    - echo "Port forwarding processes started with PIDs:"
    - cat /tmp/frontend-pf.pid 2>/dev/null || echo "Frontend PID not found"
    - cat /tmp/backend-pf.pid 2>/dev/null || echo "Backend PID not found"
    - echo "🧪 Verifying service accessibility..."
    - sleep 3
    - curl -f http://localhost:8000/ || echo "⚠️  Backend not accessible immediately"
    - curl -f -I http://localhost:3000 || echo "⚠️  Frontend not accessible immediately"
    - echo "✅ Deployment completed successfully!"
    - echo ""
    - echo "📊 Deployment Status:"
    - kubectl get deployments
    - kubectl get services
    - kubectl get pods
    - echo ""
    - echo "📱 Application is now live and accessible:"
    - echo "🌐 Frontend - http://localhost:3000"
    - echo "🔧 Backend API - http://localhost:8000"
    - echo "📖 API Documentation - http://localhost:8000/docs"
    - echo "🎥 YouTube Summarizer is ready to use!"
    - echo ""
    - echo "⚡ Application will remain accessible until the runner process stops"
  only:
    - main
  needs:
    - test-application
